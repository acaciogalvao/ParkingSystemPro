import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Download, \n  Smartphone, \n  Wifi, \n  WifiOff,\n  Bell,\n  BellOff,\n  X,\n  CheckCircle\n} from 'lucide-react';\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\nexport function PWAManager() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [notificationsEnabled, setNotificationsEnabled] = useState(false);\n  const [showInstallBanner, setShowInstallBanner] = useState(false);\n  const [swUpdateAvailable, setSwUpdateAvailable] = useState(false);\n\n  useEffect(() => {\n    // Verificar se o app já está instalado\n    const checkIfInstalled = () => {\n      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n      const isInWebAppiOS = (window.navigator as any).standalone === true;\n      setIsInstalled(isStandalone || isInWebAppiOS);\n    };\n\n    checkIfInstalled();\n\n    // Event listener para o evento beforeinstallprompt\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      \n      // Mostrar banner de instalação apenas se não estiver instalado\n      if (!isInstalled) {\n        setShowInstallBanner(true);\n      }\n    };\n\n    // Event listener para mudanças de conectividade\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    // Event listener para atualizações do Service Worker\n    const handleSWUpdate = () => {\n      setSwUpdateAvailable(true);\n    };\n\n    // Registrar Service Worker\n    registerServiceWorker();\n\n    // Verificar status das notificações\n    checkNotificationPermission();\n\n    // Adicionar event listeners\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    window.addEventListener('swUpdate', handleSWUpdate);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      window.removeEventListener('swUpdate', handleSWUpdate);\n    };\n  }, [isInstalled]);\n\n  const registerServiceWorker = async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        const registration = await navigator.serviceWorker.register('/sw.js');\n        console.log('SW registered successfully:', registration);\n\n        // Verificar atualizações\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                setSwUpdateAvailable(true);\n              }\n            });\n          }\n        });\n\n        // Ouvir mensagens do Service Worker\n        navigator.serviceWorker.addEventListener('message', (event) => {\n          if (event.data.type === 'BACKGROUND_SYNC_SUCCESS') {\n            showNotification('Sincronização', event.data.message);\n          }\n        });\n\n      } catch (error) {\n        console.error('SW registration failed:', error);\n      }\n    }\n  };\n\n  const checkNotificationPermission = () => {\n    if ('Notification' in window) {\n      setNotificationsEnabled(Notification.permission === 'granted');\n    }\n  };\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) return;\n\n    try {\n      await deferredPrompt.prompt();\n      const choiceResult = await deferredPrompt.userChoice;\n      \n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n        setIsInstalled(true);\n      }\n      \n      setDeferredPrompt(null);\n      setShowInstallBanner(false);\n    } catch (error) {\n      console.error('Error during installation:', error);\n    }\n  };\n\n  const requestNotificationPermission = async () => {\n    if ('Notification' in window) {\n      try {\n        const permission = await Notification.requestPermission();\n        setNotificationsEnabled(permission === 'granted');\n        \n        if (permission === 'granted') {\n          showNotification('Notificações Ativadas', 'Você receberá alertas sobre seu estacionamento!');\n        }\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n      }\n    }\n  };\n\n  const showNotification = (title: string, body: string) => {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      new Notification(title, {\n        body,\n        icon: '/icons/icon-192x192.png',\n        badge: '/icons/icon-192x192.png',\n        vibrate: [200, 100, 200]\n      });\n    }\n  };\n\n  const handleUpdateApp = () => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        if (registration.waiting) {\n          registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n        }\n      });\n      \n      // Recarregar a página\n      window.location.reload();\n    }\n  };\n\n  const sendTestNotification = () => {\n    showNotification(\n      'ParkSystem Pro', \n      'Veículo ABC-1234 entrou na vaga A1 às ' + new Date().toLocaleTimeString()\n    );\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Status de Conectividade */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          {isOnline ? (\n            <Wifi className=\"w-4 h-4 text-green-600\" />\n          ) : (\n            <WifiOff className=\"w-4 h-4 text-red-600\" />\n          )}\n          <span className=\"text-sm\">\n            {isOnline ? 'Online' : 'Offline'}\n          </span>\n        </div>\n        \n        {isInstalled && (\n          <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n            <Smartphone className=\"w-3 h-3 mr-1\" />\n            App Instalado\n          </Badge>\n        )}\n      </div>\n\n      {/* Banner de Instalação */}\n      {showInstallBanner && !isInstalled && (\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Download className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-sm\">Instalar App</h4>\n                  <p className=\"text-xs text-gray-600\">Acesso rápido e funcionamento offline</p>\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  onClick={handleInstallClick}\n                  className=\"h-8 text-xs\"\n                >\n                  Instalar\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\"\n                  onClick={() => setShowInstallBanner(false)}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Atualização Disponível */}\n      {swUpdateAvailable && (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <h4 className=\"font-semibold text-sm\">Atualização Disponível</h4>\n                  <p className=\"text-xs text-gray-600\">Nova versão com melhorias</p>\n                </div>\n              </div>\n              <Button \n                size=\"sm\" \n                onClick={handleUpdateApp}\n                className=\"h-8 text-xs\"\n              >\n                Atualizar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Configurações PWA */}\n      <Card>\n        <CardContent className=\"p-4 space-y-3\">\n          <h4 className=\"font-semibold text-sm\">Configurações do App</h4>\n          \n          {/* Notificações */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              {notificationsEnabled ? (\n                <Bell className=\"w-4 h-4 text-blue-600\" />\n              ) : (\n                <BellOff className=\"w-4 h-4 text-gray-400\" />\n              )}\n              <span className=\"text-sm\">Notificações</span>\n            </div>\n            \n            {!notificationsEnabled ? (\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={requestNotificationPermission}\n                className=\"h-8 text-xs\"\n              >\n                Ativar\n              </Button>\n            ) : (\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={sendTestNotification}\n                className=\"h-8 text-xs\"\n              >\n                Testar\n              </Button>\n            )}\n          </div>\n\n          {/* Instalação Manual */}\n          {!isInstalled && !showInstallBanner && (\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Download className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-sm\">Instalar App</span>\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => setShowInstallBanner(true)}\n                className=\"h-8 text-xs\"\n              >\n                Mostrar\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}